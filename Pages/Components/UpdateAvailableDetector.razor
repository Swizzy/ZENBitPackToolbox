@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

@code {
    protected override async Task OnInitializedAsync()
    {
        await JSRuntime.InvokeVoidAsync(identifier: "registerForUpdateAvailableNotification", DotNetObjectReference.Create(this), nameof(OnUpdateAvailable));
    }

    [JSInvokable(nameof(OnUpdateAvailable))]
    public Task OnUpdateAvailable()
    {
        Snackbar.Add("A new version of the application is available. Click here to reload.", Severity.Info, options =>
                                                                                                            {
                                                                                                                options.RequireInteraction = true;
                                                                                                                options.ShowCloseIcon = false;
                                                                                                                options.CloseAfterNavigation = true;
                                                                                                                options.Icon = Icons.Filled.Update;
                                                                                                                options.Onclick = _ =>
                                                                                                                                  {
                                                                                                                                      NavigationManager.NavigateTo(NavigationManager.Uri, true);
                                                                                                                                      return Task.CompletedTask;
                                                                                                                                  };
                                                                                                            });
        return Task.CompletedTask;
    }
}